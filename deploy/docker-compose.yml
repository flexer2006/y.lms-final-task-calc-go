version: '3.8'

services:
  nginx:
    build:
      context: ..
      dockerfile: build/containers/docker/nginx.Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl
      - ./certbot/www:/var/www/certbot
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://0.0.0.0/health" ]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - app-network

  auth-db:
    build:
      context: ..
      dockerfile: build/containers/docker/postgres.Dockerfile
    environment:
      - POSTGRES_DB=${AUTH_POSTGRES_DB_NAME}
      - POSTGRES_USER=${AUTH_POSTGRES_DB_USER}
      - POSTGRES_PASSWORD=${AUTH_POSTGRES_DB_PASSWORD}
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network

  orchestrator-db:
    build:
      context: ..
      dockerfile: build/containers/docker/postgres.Dockerfile
    environment:
      - POSTGRES_DB=${ORCHESTRATOR_POSTGRES_DB_NAME}
      - POSTGRES_USER=${ORCHESTRATOR_POSTGRES_DB_USER}
      - POSTGRES_PASSWORD=${ORCHESTRATOR_POSTGRES_DB_PASSWORD}
    volumes:
      - orchestrator-db-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  auth-db-data:
    driver: local
  orchestrator-db-data:
    driver: local