// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/v1/orchestrator/orchestrator.proto

package orchestratorv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrchestratorService_Calculate_FullMethodName             = "/orchestrator.v1.OrchestratorService/Calculate"
	OrchestratorService_GetCalculation_FullMethodName        = "/orchestrator.v1.OrchestratorService/GetCalculation"
	OrchestratorService_ListCalculations_FullMethodName      = "/orchestrator.v1.OrchestratorService/ListCalculations"
	OrchestratorService_ReportOperationResult_FullMethodName = "/orchestrator.v1.OrchestratorService/ReportOperationResult"
	OrchestratorService_RegisterAgent_FullMethodName         = "/orchestrator.v1.OrchestratorService/RegisterAgent"
	OrchestratorService_AgentHeartbeat_FullMethodName        = "/orchestrator.v1.OrchestratorService/AgentHeartbeat"
)

// OrchestratorServiceClient is the client API for OrchestratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OrchestratorService координирует запросы на вычисления и управляет агентами.
type OrchestratorServiceClient interface {
	// Вычисление арифметического выражения.
	Calculate(ctx context.Context, in *CalculateRequest, opts ...grpc.CallOption) (*CalculateResponse, error)
	// Получение статуса вычисления по ID.
	GetCalculation(ctx context.Context, in *GetCalculationRequest, opts ...grpc.CallOption) (*GetCalculationResponse, error)
	// Получение списка всех вычислений пользователя.
	ListCalculations(ctx context.Context, in *ListCalculationsRequest, opts ...grpc.CallOption) (*ListCalculationsResponse, error)
	// Внутренний метод для агентов для сообщения о завершении операции.
	ReportOperationResult(ctx context.Context, in *ReportOperationResultRequest, opts ...grpc.CallOption) (*ReportOperationResultResponse, error)
	// Регистрация нового агента в оркестраторе.
	RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error)
	// Сигнал работоспособности агента для оркестратора.
	AgentHeartbeat(ctx context.Context, in *AgentHeartbeatRequest, opts ...grpc.CallOption) (*AgentHeartbeatResponse, error)
}

type orchestratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestratorServiceClient(cc grpc.ClientConnInterface) OrchestratorServiceClient {
	return &orchestratorServiceClient{cc}
}

func (c *orchestratorServiceClient) Calculate(ctx context.Context, in *CalculateRequest, opts ...grpc.CallOption) (*CalculateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_Calculate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) GetCalculation(ctx context.Context, in *GetCalculationRequest, opts ...grpc.CallOption) (*GetCalculationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCalculationResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_GetCalculation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) ListCalculations(ctx context.Context, in *ListCalculationsRequest, opts ...grpc.CallOption) (*ListCalculationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCalculationsResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_ListCalculations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) ReportOperationResult(ctx context.Context, in *ReportOperationResultRequest, opts ...grpc.CallOption) (*ReportOperationResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportOperationResultResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_ReportOperationResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterAgentResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_RegisterAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) AgentHeartbeat(ctx context.Context, in *AgentHeartbeatRequest, opts ...grpc.CallOption) (*AgentHeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentHeartbeatResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_AgentHeartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchestratorServiceServer is the server API for OrchestratorService service.
// All implementations must embed UnimplementedOrchestratorServiceServer
// for forward compatibility.
//
// OrchestratorService координирует запросы на вычисления и управляет агентами.
type OrchestratorServiceServer interface {
	// Вычисление арифметического выражения.
	Calculate(context.Context, *CalculateRequest) (*CalculateResponse, error)
	// Получение статуса вычисления по ID.
	GetCalculation(context.Context, *GetCalculationRequest) (*GetCalculationResponse, error)
	// Получение списка всех вычислений пользователя.
	ListCalculations(context.Context, *ListCalculationsRequest) (*ListCalculationsResponse, error)
	// Внутренний метод для агентов для сообщения о завершении операции.
	ReportOperationResult(context.Context, *ReportOperationResultRequest) (*ReportOperationResultResponse, error)
	// Регистрация нового агента в оркестраторе.
	RegisterAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error)
	// Сигнал работоспособности агента для оркестратора.
	AgentHeartbeat(context.Context, *AgentHeartbeatRequest) (*AgentHeartbeatResponse, error)
	mustEmbedUnimplementedOrchestratorServiceServer()
}

// UnimplementedOrchestratorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrchestratorServiceServer struct{}

func (UnimplementedOrchestratorServiceServer) Calculate(context.Context, *CalculateRequest) (*CalculateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Calculate not implemented")
}
func (UnimplementedOrchestratorServiceServer) GetCalculation(context.Context, *GetCalculationRequest) (*GetCalculationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCalculation not implemented")
}
func (UnimplementedOrchestratorServiceServer) ListCalculations(context.Context, *ListCalculationsRequest) (*ListCalculationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCalculations not implemented")
}
func (UnimplementedOrchestratorServiceServer) ReportOperationResult(context.Context, *ReportOperationResultRequest) (*ReportOperationResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportOperationResult not implemented")
}
func (UnimplementedOrchestratorServiceServer) RegisterAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAgent not implemented")
}
func (UnimplementedOrchestratorServiceServer) AgentHeartbeat(context.Context, *AgentHeartbeatRequest) (*AgentHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentHeartbeat not implemented")
}
func (UnimplementedOrchestratorServiceServer) mustEmbedUnimplementedOrchestratorServiceServer() {}
func (UnimplementedOrchestratorServiceServer) testEmbeddedByValue()                             {}

// UnsafeOrchestratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchestratorServiceServer will
// result in compilation errors.
type UnsafeOrchestratorServiceServer interface {
	mustEmbedUnimplementedOrchestratorServiceServer()
}

func RegisterOrchestratorServiceServer(s grpc.ServiceRegistrar, srv OrchestratorServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrchestratorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrchestratorService_ServiceDesc, srv)
}

func _OrchestratorService_Calculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).Calculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_Calculate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).Calculate(ctx, req.(*CalculateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_GetCalculation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCalculationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).GetCalculation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_GetCalculation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).GetCalculation(ctx, req.(*GetCalculationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_ListCalculations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCalculationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).ListCalculations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_ListCalculations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).ListCalculations(ctx, req.(*ListCalculationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_ReportOperationResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportOperationResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).ReportOperationResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_ReportOperationResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).ReportOperationResult(ctx, req.(*ReportOperationResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_RegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).RegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_RegisterAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).RegisterAgent(ctx, req.(*RegisterAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_AgentHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).AgentHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_AgentHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).AgentHeartbeat(ctx, req.(*AgentHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrchestratorService_ServiceDesc is the grpc.ServiceDesc for OrchestratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrchestratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orchestrator.v1.OrchestratorService",
	HandlerType: (*OrchestratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Calculate",
			Handler:    _OrchestratorService_Calculate_Handler,
		},
		{
			MethodName: "GetCalculation",
			Handler:    _OrchestratorService_GetCalculation_Handler,
		},
		{
			MethodName: "ListCalculations",
			Handler:    _OrchestratorService_ListCalculations_Handler,
		},
		{
			MethodName: "ReportOperationResult",
			Handler:    _OrchestratorService_ReportOperationResult_Handler,
		},
		{
			MethodName: "RegisterAgent",
			Handler:    _OrchestratorService_RegisterAgent_Handler,
		},
		{
			MethodName: "AgentHeartbeat",
			Handler:    _OrchestratorService_AgentHeartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/orchestrator/orchestrator.proto",
}
