syntax = "proto3";

package orchestrator.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

option go_package = "github.com/flexer2006/y.lms-final-task-calc-go/pkg/api/orchestrator/v1;orchestratorv1";

// CalculationStatus определяет статус вычисления.
enum CalculationStatus {
    // Вычисление ожидает выполнения.
    PENDING = 0;
    // Вычисление в процессе выполнения.
    IN_PROGRESS = 1;
    // Вычисление успешно завершено.
    COMPLETED = 2;
    // Вычисление завершилось с ошибкой.
    ERROR = 3;
}

// OperationStatus определяет статус операции.
enum OperationStatus {
    // Операция ожидает выполнения.
    OPERATION_PENDING = 0;
    // Операция в процессе выполнения.
    OPERATION_IN_PROGRESS = 1;
    // Операция успешно завершена.
    OPERATION_COMPLETED = 2;
    // Операция завершилась с ошибкой.
    OPERATION_ERROR = 3;
}

// OperationType определяет тип арифметической операции.
enum OperationType {
    // Неопределенная операция.
    TYPE_UNSPECIFIED = 0;
    // Сложение.
    TYPE_ADDITION = 1;
    // Вычитание.
    TYPE_SUBTRACTION = 2;
    // Умножение.
    TYPE_MULTIPLICATION = 3;
    // Деление.
    TYPE_DIVISION = 4;
}

// OrchestratorService координирует запросы на вычисления.
service OrchestratorService {
  // Вычисление арифметического выражения.
  rpc Calculate(CalculateRequest) returns (CalculateResponse) {
    option (google.api.http) = {
      post: "/api/v1/calculate"
      body: "*"
    };
  }

  // Получение статуса вычисления по ID.
  rpc GetCalculation(GetCalculationRequest) returns (GetCalculationResponse) {
    option (google.api.http) = {
      get: "/api/v1/calculations/{id}"
    };
  }

  // Получение списка всех вычислений пользователя.
  rpc ListCalculations(google.protobuf.Empty) returns (ListCalculationsResponse) {
    option (google.api.http) = {
      get: "/api/v1/calculations"
    };
  }
}

// Запрос на вычисление выражения.
message CalculateRequest {
  // Арифметическое выражение для вычисления.
  string expression = 1;
}

// Ответ с деталями вычисления.
message CalculateResponse {
  // Уникальный идентификатор для отслеживания вычисления.
  string id = 1;
  
  // Текущий статус вычисления.
  CalculationStatus status = 2;
  
  // Результат, если вычисление завершено.
  string result = 3;
  
  // Сообщение об ошибке, если вычисление не удалось.
  string error_message = 4;
}

// Запрос на получение деталей вычисления по ID.
message GetCalculationRequest {
  // Идентификатор вычисления.
  string id = 1;
}

// Ответ с деталями вычисления.
message GetCalculationResponse {
  // Идентификатор вычисления.
  string id = 1;
  
  // Идентификатор пользователя.
  string user_id = 2;
  
  // Исходное выражение.
  string expression = 3;
  
  // Результат вычисления.
  string result = 4;
  
  // Статус вычисления.
  CalculationStatus status = 5;
  
  // Сообщение об ошибке.
  string error_message = 6;
  
  // Время создания.
  google.protobuf.Timestamp created_at = 7;
  
  // Время последнего обновления.
  google.protobuf.Timestamp updated_at = 8;
}

// Ответ со списком вычислений.
message ListCalculationsResponse {
  // Список вычислений.
  repeated GetCalculationResponse calculations = 1;
}